##################################################################################
# LAMBDA
##################################################################################

# Archive source

data "archive_file" "lambda_source_package" {
  type        = "zip"
  source_dir  = "${local.contacts_api_local_path}/dist"
  output_path = "${local.contacts_api_local_path}/.tmp/lambda.zip"
}

# S3 bucket for lambda

resource "aws_s3_bucket" "lambda_bucket" {
  bucket        = local.s3_lambda_function_bucket_name
  force_destroy = true

  tags = merge(local.common_tags, {
    resource_name = "${local.naming_prefix}-s3-lambda-function-bucket"
  })
}

# This ownership control seems to be necessary for the private aws_s3_bucket_acl to work.
resource "aws_s3_bucket_ownership_controls" "lambda_bucket" {
  bucket = aws_s3_bucket.lambda_bucket.id
  rule {
    object_ownership = "BucketOwnerPreferred"
  }
}

resource "aws_s3_bucket_acl" "lambda_bucket" {
  depends_on = [aws_s3_bucket_ownership_controls.lambda_bucket]
  bucket     = aws_s3_bucket.lambda_bucket.id
  acl        = "private"
}

resource "aws_s3_object" "lambda_source" {
  bucket = aws_s3_bucket.lambda_bucket.id
  key    = "putTaxiRequest/v${var.contacts_api_version}/lambda.zip"
  source = data.archive_file.lambda_source_package.output_path
  etag   = filemd5(data.archive_file.lambda_source_package.output_path)
}

# Lambda Function
resource "aws_lambda_function" "put_contact_lambda" {
  function_name = "${local.naming_prefix}-putContact"
  role          = aws_iam_role.lambda_role.arn
  handler       = "put-contact.handler"
  runtime       = "nodejs16.x"
  timeout       = 60

  # The bucket name as created earlier with "aws s3api create-bucket"
  s3_bucket = aws_s3_bucket.lambda_bucket.id
  s3_key    = aws_s3_object.lambda_source.key

  environment {
    variables = {
      NODE_ENV   = var.environment
      TABLE_NAME = aws_dynamodb_table.contact_table.name
    }
  }

  tags = merge(local.common_tags, {
    resource_name = "${local.naming_prefix}-contacts-lambda"
  })
}

# IAM Role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "lambda_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid    = "LambdaExecutionRole"
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })

  tags = merge(local.common_tags, {
    resource_name = "${local.naming_prefix}-lambda-role"
  })
}

resource "aws_iam_role_policy" "lambda_role_policy" {
  name = "${local.naming_prefix}-lambda-dynamodb-access-policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem"
        ],
        Resource = "${aws_dynamodb_table.contact_table.arn}"
      },
      {
        Effect = "Allow",
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        Resource = "*"
      }
    ],
  })
}

# API Gateway
resource "aws_api_gateway_rest_api" "contacts_api" {
  name        = "${local.naming_prefix}-contacts-api"
  description = "API for Volo Accendo"
  disable_execute_api_endpoint = true

  tags = merge(local.common_tags, {
    resource_name = "${local.naming_prefix}-api-gateway"
  })
}

resource "aws_api_gateway_resource" "contacts_api_resource" {
  rest_api_id = aws_api_gateway_rest_api.contacts_api.id
  parent_id   = aws_api_gateway_rest_api.contacts_api.root_resource_id
  path_part   = "contacts"
}

resource "aws_api_gateway_method" "contacts_api_method" {
  rest_api_id   = aws_api_gateway_rest_api.contacts_api.id
  resource_id   = aws_api_gateway_resource.contacts_api_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "put_contact_lambda_integration" {
  rest_api_id = aws_api_gateway_rest_api.contacts_api.id
  resource_id = aws_api_gateway_resource.contacts_api_resource.id
  http_method = aws_api_gateway_method.contacts_api_method.http_method
  type        = "AWS_PROXY"
  integration_http_method = "POST"
  uri         = aws_lambda_function.put_contact_lambda.invoke_arn
}

resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.put_contact_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.contacts_api.execution_arn}/*/POST/contacts"

  # More: http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
#   source_arn = "arn:aws:execute-api:${var.myregion}:${var.accountId}:${aws_api_gateway_rest_api.api.id}/*/${aws_api_gateway_method.method.http_method}${aws_api_gateway_resource.resource.path}"
}

# resource "aws_cloudwatch_log_group" "api_gateway_logs" {
#   name              = "/aws/api-gateway/${aws_api_gateway_rest_api.contacts_api.id}"
#   retention_in_days = 14

#   tags = merge(local.common_tags, {
#     resource_name = "${local.naming_prefix}-api-gateway-logs"
#   })
# }

# resource "aws_api_gateway_stage" "api_stage" {
#   stage_name    = var.environment
#   rest_api_id   = aws_api_gateway_rest_api.contacts_api.id
#   deployment_id = aws_api_gateway_deployment.contacts_api_deployment.id

#   access_log_settings {
#     destination_arn = aws_cloudwatch_log_group.api_gateway_logs.arn
#     format = jsonencode({
#       requestId: "$context.requestId",
#       ip: "$context.identity.sourceIp",
#       caller: "$context.identity.caller",
#       user: "$context.identity.user",
#       requestTime: "$context.requestTime",
#       httpMethod: "$context.httpMethod",
#       resourcePath: "$context.resourcePath",
#       status: "$context.status",
#       protocol: "$context.protocol",
#       responseLength: "$context.responseLength"
#     })
#   }

#   tags = merge(local.common_tags, {
#     resource_name = "${local.naming_prefix}-api-stage"
#   })
# }

# Define the API Gateway custom domain name
resource "aws_api_gateway_domain_name" "api_domain" {
  domain_name = "api.${var.domain_name}"

  regional_certificate_arn = aws_acm_certificate.cert.arn

  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

# Create the base path mapping for the custom domain name
resource "aws_api_gateway_base_path_mapping" "api_mapping" {
  api_id      = aws_api_gateway_rest_api.contacts_api.id
  stage_name  = aws_api_gateway_deployment.contacts_api_deployment.stage_name
  domain_name = aws_api_gateway_domain_name.api_domain.domain_name
}

# Route 53 Record for API Subdomain
resource "aws_route53_record" "api_domain_name" {
  zone_id = data.aws_route53_zone.volo_accendo_domain.zone_id
  name    = aws_api_gateway_domain_name.api_domain.domain_name
  type    = "A"

  alias {
    name                   = aws_api_gateway_domain_name.api_domain.regional_domain_name
    zone_id                = aws_api_gateway_domain_name.api_domain.regional_zone_id
    evaluate_target_health = false
  }
}

# Deploy API
resource "aws_api_gateway_deployment" "contacts_api_deployment" {
  rest_api_id = aws_api_gateway_rest_api.contacts_api.id
  stage_name  = var.environment
  depends_on = [aws_api_gateway_integration.put_contact_lambda_integration]
  lifecycle {
    create_before_destroy = true
  }
}