name: Contacts API Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    paths:
      - "cloud/apis/contacts-api/src/**"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "cloud/apis/contacts-api/src/**"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      actions: write
      contents: read

    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_ORG: "volo-accendo"
    
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      # Uncomment for debugging
      # - name: List directory contents
      #   run: |
      #     ls -R

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.5.0

      - uses: actions/setup-node@v4
        name: Set up Node.js
        with:
          node-version: "20.x"
          cache: "pnpm"
          cache-dependency-path: cloud/apis/contacts-api/pnpm-lock.yaml

      - name: Install dependencies
        run: |
          cd cloud/apis/contacts-api
          pnpm install

      - name: Run tests
        run: |
          cd cloud/apis/contacts-api
          pnpm test

      - name: Build
        run: |
          cd cloud/apis/contacts-api
          pnpm build

      - name: Set Environment Variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "TF_VAR_environment=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          fi

      - name: Start HCP Terraform Plan and Apply Run
        id: start_run
        run: |
          TF_WORKSPACE="volo-accendo-contacts-api-deployment-${TF_VAR_environment}"
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/runs \
            -d '{
                  "data": {
                    "attributes": {
                      "is-destroy": false
                    },
                    "type": "runs",
                    "relationships": {
                      "workspace": {
                        "data": {
                          "type": "workspaces",
                          "id": "'$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                                     https://app.terraform.io/api/v2/organizations/$TF_ORG/workspaces/$TF_WORKSPACE | jq -r .data.id)'"
                        }
                      }
                    }
                  }
                }')
          echo "RUN_ID=$(echo $response | jq -r .data.id)" >> $GITHUB_ENV

      - name: Poll HCP Terraform Run Status
        id: poll_run
        run: |
          while true; do
            status=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                            https://app.terraform.io/api/v2/runs/$RUN_ID | jq -r .data.attributes.status)
            echo "Current status: $status"
            
            if [ "$status" == "applied" ]; then
              echo "Terraform run completed successfully."
              break
            elif [[ "$status" == "errored" || "$status" == "canceled" ]]; then
              echo "Terraform run failed or was canceled."
              exit 1
            else
              echo "Run is still in progress. Checking again in 30 seconds..."
              sleep 30
            fi
          done

      - name: Retrieve S3 Bucket Name from HCP Terraform Output
        id: get_s3_bucket_name
        if: success()
        run: |
          workspace_id=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                          https://app.terraform.io/api/v2/organizations/$TF_ORG/workspaces/$TF_WORKSPACE | jq -r .data.id)
          s3_bucket_name=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                          "https://app.terraform.io/api/v2/workspaces/$workspace_id/outputs" | \
                          jq -r '.data[] | select(.attributes.name=="contacts_api_lambda_bucket_name") | .attributes.value')
          
          if [[ -z "$s3_bucket_name" ]]; then
            echo "Error: S3 bucket name output not found." >&2
            exit 1
          fi

          echo "S3_BUCKET_NAME=$s3_bucket_name" >> $GITHUB_ENV
          echo "Retrieved S3 bucket name: $s3_bucket_name"

      - name: Archive dist directory
        run: |
          cd cloud/apis/contacts-api/dist
          zip -r dist.zip .

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"  # Adjust if necessary
        run: |
          aws s3 cp cloud/apis/contacts-api/dist/dist.zip s3://$S3_BUCKET_NAME/path/to/archive/dist.zip
