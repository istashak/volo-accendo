name: Terraform Apply

# Trigger the workflow on push events to the main branch
on:
  workflow_dispatch: # Enable manual triggering
  workflow_run:
    workflows:
      - Contacts Api Build and Test
    types:
      - completed

  # repository_dispatch:
  #   types: [trigger_terraform_workflow]

  # push:
  #   branches:
  #     - main
  #     - develop
  #   paths:
  #     - "cloud/terraform/**"
  # pull_request:
  #   branches:
  #     - main
  #     - develop
  #   paths:
  #     - "cloud/terraform/**"

# permissions:
#   actions: read  # Ensure the token has permission to read artifacts

jobs:
  terraform:
    # Define the environment where the job will run
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      # This step clones the repository into the runner's workspace, making the code available for subsequent steps.
      - name: Checkout code
        uses: actions/checkout@v4
        # with:
          # ref: develop
          # ref: ${{ inputs.branch || github.event.workflow_run.head_branch }}

      # Uncomment for debugging
      - name: List directory contents 1
        run: |
          ls -R

      # Step 2: Download the contacts api build artifact created in the contacts-api-build-and-test workflow
      - name: Download the contacts api build artifact
        uses: actions/download-artifact@v4
        with:
          # name: contacts-lambda-build-develop
          name: contacts-lambda-build-${{ inputs.branch || github.event.workflow_run.head_branch }}
          # name: contacts-lambda-build-${{ github.ref_name }}
          path: cloud/apis/contacts-api/dist/ # Specify the local path for the download to reside in
          github-token: ${{ secrets.WORKFLOW_TOKEN }}

      # Uncomment for debugging
      - name: List directory contents 2
        run: |
          ls -R

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
        # This step installs the specified version of Terraform on the runner.

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set Environment Variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "TF_VAR_environment=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          fi

      # Step 3: Install Terraform dependencies
      - name: Install dependencies
        run: |
          cd cloud/terraform/${{ env.TF_VAR_environment }}
          terraform init
        # This step initializes the Terraform configuration directory.
        # It installs the required provider plugins and sets up the workspace.

      # Step 4: Validate Terraform Scripts
      - name: Terraform Validate
        run: |
          cd cloud/terraform/${{ env.TF_VAR_environment }}
          terraform validate -no-color

      # - name: Set Environment Variables
      # run: |
      #   echo "TF_VAR_company_name=${{ secrets['${{ github.event.inputs.environment | upper }}_COMPANY_NAME'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_naming_prefix=${{ secrets['${{ github.event.inputs.environment | upper }}_NAMING_PREFIX'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_project=${{ secrets['${{ github.event.inputs.environment | upper }}_PROJECT'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_region=${{ secrets['${{ github.event.inputs.environment | upper }}_REGION'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_environment=${{ secrets['${{ github.event.inputs.environment | upper }}_ENVIRONMENT'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_dynamodb_table_name=${{ secrets['${{ github.event.inputs.environment | upper }}_DYNAMODB_TABLE_NAME'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_contacts_api_version=${{ secrets['${{ github.event.inputs.environment | upper }}_CONTACTS_API_VERSION'] }}" >> $GITHUB_ENV
      #   echo "TF_VAR_domain_name=${{ secrets['${{ github.event.inputs.environment | upper }}_DOMAIN_NAME'] }}" >> $GITHUB_ENV

      # Step 5: Run Terraform Plan
      - name: Terraform Plan
        id: Plan
        run: |
          cd cloud/terraform/${{ env.TF_VAR_environment }}
          terraform plan -var-file="${TF_VAR_environment}.tfvars"

      # Step ?: Run Terraform to apply changes
      - name: Run Terraform
        run: |
          cd cloud/terraform/${{ env.TF_VAR_environment }}
          terraform apply -auto-approve -var-file="${TF_VAR_environment}.tfvars"
        # This step applies the Terraform configuration.
        # The `-auto-approve` flag automatically approves any proposed changes to the infrastructure without requiring manual confirmation.

      # # Extract Terraform outputs and set as environment variables
      # - name: Get Terraform Outputs
      #   id: terraform_outputs
      #   run: |
      #     echo "API_URL=$(terraform output -raw api_url)" >> $GITHUB_ENV
      #     echo "DB_ENDPOINT=$(terraform output -raw db_endpoint)" >> $GITHUB_ENV

      # # Use the environment variables in subsequent steps
      # - name: Use Environment Variables
      #   run: |
      #     echo "API URL: $API_URL"
      #     echo "DB Endpoint: $DB_ENDPOINT"
