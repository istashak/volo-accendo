# name: Terraform Apply

# # Trigger the workflow on push events to the main branch
# on:
#   push:
#     branches:
#       - main

# jobs:
#   terraform:
#     # Define the environment where the job will run
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Check out the code from the repository
#       - name: Checkout code
#         uses: actions/checkout@v3
#         # This step clones the repository into the runner's workspace, making the code available for subsequent steps.

#       # Step 2: Set up Terraform
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0
#         # This step installs the specified version of Terraform on the runner.

#       # Step 3: Install Terraform dependencies
#       - name: Install dependencies
#         run: |
#           terraform init
#         # This step initializes the Terraform configuration directory. 
#         # It installs the required provider plugins and sets up the workspace.

#       # Step 4: Run Terraform to apply changes
#       - name: Run Terraform
#         run: |
#           terraform apply -auto-approve
#         # This step applies the Terraform configuration. 
#         # The `-auto-approve` flag automatically approves any proposed changes to the infrastructure without requiring manual confirmation.

#       # # Extract Terraform outputs and set as environment variables
#       # - name: Get Terraform Outputs
#       #   id: terraform_outputs
#       #   run: |
#       #     echo "API_URL=$(terraform output -raw api_url)" >> $GITHUB_ENV
#       #     echo "DB_ENDPOINT=$(terraform output -raw db_endpoint)" >> $GITHUB_ENV

#       # # Use the environment variables in subsequent steps
#       # - name: Use Environment Variables
#       #   run: |
#       #     echo "API URL: $API_URL"
#       #     echo "DB Endpoint: $DB_ENDPOINT"

