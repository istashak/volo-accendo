name: Contacts Api Build and Test

on:
  workflow_dispatch: # Enable manual triggering
  push:
    branches:
      - main
      - develop
    paths:
      - "cloud/apis/contacts-api/src/**"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "cloud/apis/contacts-api/src/**"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      actions: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      # Uncomment for debugging
      # - name: List directory contents
      #   run: |
      #     ls -R

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.5.0

      # An alternative method for caching pnpm dependencies
      # - name: Cache pnpm modules
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       cloud/apis/contacts-api/node_modules
      #     key: ${{ runner.os }}-pnpm-${{ hashFiles('cloud/apis/contacts-api/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-

      - uses: actions/setup-node@v4
        name: Set up Node.js
        with:
          node-version: "20.x"
          cache: "pnpm"
          cache-dependency-path: cloud/apis/contacts-api/pnpm-lock.yaml

      - name: Install dependencies
        run: |
          cd cloud/apis/contacts-api
          pnpm install

      - name: Run tests
        run: |
          cd cloud/apis/contacts-api
          pnpm test

      - name: Build
        run: |
          cd cloud/apis/contacts-api
          pnpm build

      # Uncomment for debugging
      - name: List directory contents
        run: |
          ls -R

      - name: Set Environment Variables
      run: |
        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
          echo "TF_VAR_environment=prod" >> $GITHUB_ENV
        elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
        fi

      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}  # Terraform Cloud API token from GitHub secrets
        TF_ORG: "volo-accendo"       # Replace with your Terraform Cloud organization name
        TF_WORKSPACE: "volo-accendo-contacts-api-deployment-${{ env.TF_VAR_environment }}"    # Replace with your Terraform Cloud workspace name

      steps:
    - name: Start Terraform Plan and Apply Run
      id: start_run
      run: |
        # Start a new run in the workspace
        response=$(curl -s -X POST \
          -H "Authorization: Bearer $TF_API_TOKEN" \
          -H "Content-Type: application/vnd.api+json" \
          https://app.terraform.io/api/v2/runs \
          -d '{
                "data": {
                  "attributes": {
                    "is-destroy": false
                  },
                  "type": "runs",
                  "relationships": {
                    "workspace": {
                      "data": {
                        "type": "workspaces",
                        "id": "'$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                                   https://app.terraform.io/api/v2/organizations/$TF_ORG/workspaces/$TF_WORKSPACE | jq -r .data.id)'"
                      }
                    }
                  }
                }
              }')
        
        # Extract the run ID for polling
        echo "RUN_ID=$(echo $response | jq -r .data.id)" >> $GITHUB_ENV
        
    - name: Poll Terraform Run Status
      id: poll_run
      run: |
        # Poll every 30 seconds to check the run status
        while true; do
          status=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                          https://app.terraform.io/api/v2/runs/$RUN_ID | jq -r .data.attributes.status)

          echo "Current status: $status"
          
          if [ "$status" == "applied" ]; then
            echo "Terraform run completed successfully."
            break
          elif [[ "$status" == "errored" || "$status" == "canceled" ]]; then
            echo "Terraform run failed or was canceled."
            exit 1
          else
            echo "Run is still in progress. Checking again in 30 seconds..."
            sleep 30
          fi
        done

    - name: Retrieve S3 Bucket Name from Terraform Output
      id: get_s3_bucket_name
      if: success()  # This ensures the step only runs if the previous steps were successful
      run: |
        # Fetch workspace ID
        workspace_id=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                        https://app.terraform.io/api/v2/organizations/$TF_ORG/workspaces/$TF_WORKSPACE | jq -r .data.id)
        
        # Fetch output values from the latest state version
        s3_bucket_name=$(curl -s -H "Authorization: Bearer $TF_API_TOKEN" \
                        "https://app.terraform.io/api/v2/workspaces/$workspace_id/outputs" | \
                        jq -r '.data[] | select(.attributes.name=="s3_bucket_name") | .attributes.value')
        
        if [[ -z "$s3_bucket_name" ]]; then
          echo "Error: S3 bucket name output not found." >&2
          exit 1
        fi

        echo "S3_BUCKET_NAME=$s3_bucket_name" >> $GITHUB_ENV
        echo "Retrieved S3 bucket name: $s3_bucket_name"

    # Create an archive of the dist directory
    - name: Archive dist directory
      run: |
        zip -r dist.zip dist

    # Install AWS CLI
    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    # Upload the archive to S3
    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "us-east-1" # Change to your AWS region if different
      run: |
        aws s3 cp dist.zip s3://$S3_BUCKET_NAME/path/to/archive/dist.zip
